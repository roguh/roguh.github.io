<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Asynchronous Python on Hugo O. Rivera's website</title><link>https://roguh.com/tags/asynchronous-python/</link><description>Recent content in Asynchronous Python on Hugo O. Rivera's website</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Mon, 27 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://roguh.com/tags/asynchronous-python/index.xml" rel="self" type="application/rss+xml"/><item><title>Async Python Tricks</title><link>https://roguh.com/tutorials/python_asyncio/</link><pubDate>Mon, 27 Dec 2021 00:00:00 +0000</pubDate><guid>https://roguh.com/tutorials/python_asyncio/</guid><description>Starting an Async Program In Python 3.7 and above, you can use asyncio.run to easily start your async program:
async def async_main(): await asyncio.sleep(1) print(&amp;quot;Async&amp;quot;) def main(): asyncio.run(async_main(), debug=True) if __name__ == &amp;quot;__main__&amp;quot;: main() Alternatives To run an async program in other ways, you need to use the loop directly.
loop = asyncio.get_running_loop() loop.run_until_complete if you have one function you need to run loop.run_forever if you never want to close the async loop Running blocking synchronous functions after Python 3.</description></item><item><title>Async Python: Debug Mode and Warnings</title><link>https://roguh.com/tutorials/python_asyncio_warnings/</link><pubDate>Mon, 27 Dec 2021 00:00:00 +0000</pubDate><guid>https://roguh.com/tutorials/python_asyncio_warnings/</guid><description>Enable asyncio Debug Mode See the Python docs for all the ways to turn on async debug mode.
Warnings about blocking async code In debug mode, you will get warnings about async code that blocks for too long as well as other warnings.
Example code:
import asyncio import time async def blocks(): print(&amp;quot;START&amp;quot;) # Synchronous blocking code time.sleep(0.35) await asyncio.sleep(0.5) # Synchronous blocking code time.sleep(0.15) await asyncio.sleep(0.1) print(&amp;quot;DONE&amp;quot;) asyncio.run(blocks(), debug=True) Output:</description></item></channel></rss>